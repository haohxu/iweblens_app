1. Web Service
	program's methodology
	overall architecture
	how web service is created
	how JSON messages are creates

2. dockerfile

3. Kubernetes
3.1 How to install Docker and Kubernetes? Which version? Which network module? Why?

- install Docker

	sudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
	sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	sudo apt-get install docker.io
	sudo docker version

- install Kubernetes

	curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
	sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
	sudo apt-get install kubeadm kubelet kubectl
	sudo apt-mark hold kubeadm kubelet kubectl
	kubeadm version
	
- network module (Weave)

	kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
	
	Because Weave can expose master-node to the public Internet, but Flannel cannot, after I tried several times...
	
3.2 List your cluster nodes and explain cluster-info.

	kubectl get nodes -o wide
	
	Explain
	
3.3 Show deployment YAML and explain
	
	nano deployment.yml

3.4 Show service YAML and explain

	nano service.yml

3.5 Explain and show how your docker image is built and loaded in your Kubernetes cluster.

- local computer: 
	docker build -t haoxucode/iweblens_app:latest .
	docker login
	docker push haoxucode/iweblens_app:latest
	
- cloud VMs
	sudo docker login
	sudo docker pull haoxucode/iweblens_app:latest
	
3.6 Show VMs in OCI. Show public IP address of master-node. Show security group. Explain ports. 

3.7 Show 5 pods. Show service can be reached from outside. Run local client test.

	kubectl get nodes,deployments,svc,pods -n=myapp -o wide
	
- local client 
	python iWebLens_client.py inputfolder/ http://168.138.13.227:31000/api/object_detection 1


3.8 Show the log for pods to demonstrate load balancing is working as expected

- worker-node01:
	kubectl logs -n=myapp iweblens-deployment-7768944c99-fnh6z
	
- worker-node02:
	kubectl logs -n=myapp iweblens-deployment-7768944c99-25q9s